--- TableTicker.h
+++ TableTicker.h
@@ -74,16 +74,17 @@ class TableTicker: public Sampler {
     mProfileThreads = hasFeature(aFeatures, aFeatureCount, "threads") || aFilterCount > 0;
     mUnwinderThread = hasFeature(aFeatures, aFeatureCount, "unwinder") || sps_version2();
     mAddLeafAddresses = hasFeature(aFeatures, aFeatureCount, "leaf");
     mPrivacyMode = hasFeature(aFeatures, aFeatureCount, "privacy");
     mAddMainThreadIO = hasFeature(aFeatures, aFeatureCount, "mainthreadio");
     mProfileMemory = hasFeature(aFeatures, aFeatureCount, "memory");
     mTaskTracer = hasFeature(aFeatures, aFeatureCount, "tasktracer");
     mLayersDump = hasFeature(aFeatures, aFeatureCount, "layersdump");
+    mDisplayListDump = hasFeature(aFeatures, aFeatureCount, "displaylistdump");
 
 #if defined(XP_WIN)
     if (mProfilePower) {
       mIntelPowerGadget = new IntelPowerGadget();
       mProfilePower = mIntelPowerGadget->Init();
     }
 #endif
 
@@ -205,16 +206,17 @@ class TableTicker: public Sampler {
   bool ProfileGPU() const { return mProfileGPU; }
   bool ProfilePower() const { return mProfilePower; }
   bool ProfileThreads() const { return mProfileThreads; }
   bool InPrivacyMode() const { return mPrivacyMode; }
   bool AddMainThreadIO() const { return mAddMainThreadIO; }
   bool ProfileMemory() const { return mProfileMemory; }
   bool TaskTracer() const { return mTaskTracer; }
   bool LayersDump() const { return mLayersDump; }
+  bool DisplayListDump() const { return mDisplayListDump; }
 
 protected:
   // Called within a signal. This function must be reentrant
   virtual void UnwinderTick(TickSample* sample);
 
   // Called within a signal. This function must be reentrant
   virtual void InplaceTick(TickSample* sample);
 
@@ -231,16 +233,17 @@ protected:
   bool mJankOnly;
   bool mProfileJS;
   bool mProfileGPU;
   bool mProfileThreads;
   bool mUnwinderThread;
   bool mProfileJava;
   bool mProfilePower;
   bool mLayersDump;
+  bool mDisplayListDump;
 
   // Keep the thread filter to check against new thread that
   // are started while profiling
   char** mThreadNameFilters;
   uint32_t mFilterCount;
   bool mPrivacyMode;
   bool mAddMainThreadIO;
   bool mProfileMemory;
